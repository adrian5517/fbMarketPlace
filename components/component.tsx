'use client'

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/5mr25g2aTqD
*/
import { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import Link from 'next/link'
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import Image from 'next/image'
import { Card, CardContent } from "@/components/ui/card"

export interface Listing {
  id: string;
  title: string;
  description: string | null;
  price: number;
  category: string;
  seller_email: string;
  image_url: string | null;
  location: string | null;
  created_at: string;
  updated_at: string;
}

export function Component({ listings, currentCategory, currentQuery }: { listings: Listing[], currentCategory: string, currentQuery: string }) {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [searchQuery, setSearchQuery] = useState(currentQuery || '')

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    const params = new URLSearchParams(searchParams)
    params.set('query', searchQuery)
    router.push(`/?${params.toString()}`)
  }

  const handleCategoryChange = (category: string) => {
    const params = new URLSearchParams(searchParams)
    if (category === 'all') {
      params.delete('category')
    } else {
      params.set('category', category)
    }
    router.push(`/?${params.toString()}`)
  }
  return (
    <div className="bg-white text-gray-900">
      <header className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center space-x-4">
          <StoreIcon className="h-8 w-8 text-gray-900" />
          <form onSubmit={handleSearch} className="relative">
            <SearchIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
            <Input
              className="pl-10 pr-4 py-2 border rounded-full bg-gray-100 focus:bg-white focus:ring-2 focus:ring-gray-900 transition-all"
              placeholder="Search Marketplace..."
              type="search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </form>
        </div>
        <div className="flex items-center space-x-4">
          <Link href="/create-listing">
            <Button className="bg-gray-200 text-gray-900 hover:bg-gray-300 rounded-full">Create Listing</Button>
          </Link>
          <Avatar>
            <AvatarImage alt="User profile" src="/placeholder.svg?height=40&width=40" />
            <AvatarFallback>U</AvatarFallback>
          </Avatar>
        </div>
      </header>
      <main className="p-4">
        <Tabs defaultValue={currentCategory} onValueChange={handleCategoryChange}>
          <TabsList className="border-b">
            <TabsTrigger value="all">All</TabsTrigger>
            <TabsTrigger value="electronics">Electronics</TabsTrigger>
            <TabsTrigger value="vehicles">Vehicles</TabsTrigger>
            <TabsTrigger value="property">Property</TabsTrigger>
            <TabsTrigger value="apparel">Apparel</TabsTrigger>
          </TabsList>
          <TabsContent value="all">
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4">
              {listings.map((listing) => (
                <Link href={`/listing/${listing.id}`} key={listing.id}>
                <Card>
                  <Image
                    alt={listing.title}
                    className="w-full h-48 object-cover"
                    height={200}
                    src={listing.image_url || "/placeholder.svg"}
                    width={200}
                  />
                  <CardContent className="p-4">
                    <h3 className="font-semibold text-lg">{listing.title}</h3>
                    <p className="text-gray-700">${listing.price.toFixed(2)}</p>
                    <p className="text-sm text-gray-500">{listing.location || 'Unknown'}</p>
                  </CardContent>
                </Card>
              </Link>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}


function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}


function StoreIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7" />
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
      <path d="M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4" />
      <path d="M2 7h20" />
      <path d="M22 7v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V7" />
    </svg>
  )
}
